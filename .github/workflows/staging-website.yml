name: Deploy static content to Staging

on:
  push:
    branches: [release/*]

concurrency: "staging"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.17.0
          registry-url: https://npm.pkg.github.com/
          cache: "npm"
      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.GH_PACKAGE_PAT}}
      - run: npm run build --if-present
        env:
          REACT_APP_AIRTABLE_API_KEY: ${{ secrets.REACT_APP_AIRTABLE_API_KEY }}
          REACT_APP_AIRTABLE_BASE_ID: ${{ secrets.REACT_APP_AIRTABLE_BASE_ID }}
          REACT_APP_AIRTABLE_TABLE_ID_WAITING_LIST: ${{ secrets.REACT_APP_AIRTABLE_TABLE_ID_WAITING_LIST }}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  deploy:
    needs: build
    environment:
      name: staging
      url: https://stagingcueprise.com
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CICDRole
          role-duration-seconds: 1200
      - uses: montudor/action-zip@v1
      - name: Deploy to Amplify
        run: |
          (cd build; zip -r "../build.zip" .)
          JOB=$(aws amplify create-deployment --app-id ${APP_ID} --branch-name main)
          JOB_ID=$(echo ${JOB} | jq -r '.jobId')
          UPLOAD_URL=$(echo ${JOB} | jq -r '.zipUploadUrl')
          curl -H "Content-Type: application/zip" "${UPLOAD_URL}" --upload-file "build.zip"
          aws amplify start-deployment --app-id ${APP_ID} --branch-name main --job-id ${JOB_ID}
          while [[ "$(aws amplify get-job --app-id ${APP_ID} --branch-name main --job-id ${JOB_ID} | jq -r '.job.summary.status')" =~ ^(PENDING|RUNNING)$ ]]; do sleep 1; done
          JOB_STATUS=$(aws amplify get-job --app-id ${APP_ID} --branch-name main --job-id ${JOB_ID} | jq -r '.job.summary.status')
          echo "Job status is ${JOB_STATUS}"
        env:
          APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
